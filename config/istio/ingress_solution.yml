#@ load("@ytt:data", "data")
#@ load("@ytt:library", "library")
#@ load("@ytt:template", "template")

#@ load("/namespaces.star", "system_namespace", "workloads_namespace")

#@ def ingress_values():
system_namespace: #@ system_namespace()
workloads_namespace: #@ workloads_namespace()
system_domain: #@ data.values.system_domain
app_domains:
#@ for domain in data.values.app_domains:
#@overlay/append
- #@ domain
#@ end
gateway:
  https_only: #@ data.values.gateway.https_only
system_certificate:
  crt: #@ data.values.system_certificate.crt
  key: #@ data.values.system_certificate.key
  ca: #@ data.values.system_certificate.ca

workloads_certificate:
  crt: #@ data.values.workloads_certificate.crt
  key: #@ data.values.workloads_certificate.key
  ca: #@ data.values.workloads_certificate.ca
load_balancer:
  enable: #@ data.values.load_balancer.enable
  static_ip: #@ data.values.load_balancer.static_ip
remove_resource_requirements: #@ data.values.remove_resource_requirements
use_external_dns_for_wildcard: #@ data.values.use_external_dns_for_wildcard
use_first_party_jwt_tokens: #@ data.values.use_first_party_jwt_tokens
#@ end

#@ if data.values.networking.ingress_solution_provider == "istio":
#@ istio = library.get("istio").with_data_values(ingress_values())

#! --- #@ template.replace(istio.with_data_values(ingress_values()).eval()) # TODO investigate for non-overlay comrades

#@   overlays = istio.export("all_overlays", path="all-overlays.star")
#@   for overlay in overlays:
--- #@ template.replace(overlay())
#@   end


#@ end

